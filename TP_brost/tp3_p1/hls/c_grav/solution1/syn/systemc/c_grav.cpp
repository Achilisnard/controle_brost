// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "c_grav.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic c_grav::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic c_grav::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> c_grav::ap_ST_fsm_state1 = "1";
const sc_lv<3> c_grav::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> c_grav::ap_ST_fsm_state5 = "100";
const sc_lv<32> c_grav::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool c_grav::ap_const_boolean_1 = true;
const sc_lv<32> c_grav::ap_const_lv32_1 = "1";
const bool c_grav::ap_const_boolean_0 = false;
const sc_lv<1> c_grav::ap_const_lv1_0 = "0";
const sc_lv<1> c_grav::ap_const_lv1_1 = "1";
const sc_lv<64> c_grav::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> c_grav::ap_const_lv64_1 = "1";
const sc_lv<32> c_grav::ap_const_lv32_2 = "10";

c_grav::c_grav(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_s_axis_video_V_data_V_U = new regslice_both<8>("regslice_both_s_axis_video_V_data_V_U");
    regslice_both_s_axis_video_V_data_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_data_V_U->data_in(s_axis_video_TDATA);
    regslice_both_s_axis_video_V_data_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_data_V_U->ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in);
    regslice_both_s_axis_video_V_data_V_U->data_out(s_axis_video_TDATA_int);
    regslice_both_s_axis_video_V_data_V_U->vld_out(s_axis_video_TVALID_int);
    regslice_both_s_axis_video_V_data_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_data_V_U->apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk);
    regslice_both_s_axis_video_V_keep_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_keep_V_U");
    regslice_both_s_axis_video_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_keep_V_U->data_in(s_axis_video_TKEEP);
    regslice_both_s_axis_video_V_keep_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_keep_V_U->ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in);
    regslice_both_s_axis_video_V_keep_V_U->data_out(s_axis_video_TKEEP_int);
    regslice_both_s_axis_video_V_keep_V_U->vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out);
    regslice_both_s_axis_video_V_keep_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_keep_V_U->apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk);
    regslice_both_s_axis_video_V_strb_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_strb_V_U");
    regslice_both_s_axis_video_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_strb_V_U->data_in(s_axis_video_TSTRB);
    regslice_both_s_axis_video_V_strb_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_strb_V_U->ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in);
    regslice_both_s_axis_video_V_strb_V_U->data_out(s_axis_video_TSTRB_int);
    regslice_both_s_axis_video_V_strb_V_U->vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out);
    regslice_both_s_axis_video_V_strb_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_strb_V_U->apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk);
    regslice_both_s_axis_video_V_user_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_user_V_U");
    regslice_both_s_axis_video_V_user_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_user_V_U->data_in(s_axis_video_TUSER);
    regslice_both_s_axis_video_V_user_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_user_V_U->ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in);
    regslice_both_s_axis_video_V_user_V_U->data_out(s_axis_video_TUSER_int);
    regslice_both_s_axis_video_V_user_V_U->vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out);
    regslice_both_s_axis_video_V_user_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_user_V_U->apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk);
    regslice_both_s_axis_video_V_last_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_last_V_U");
    regslice_both_s_axis_video_V_last_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_last_V_U->data_in(s_axis_video_TLAST);
    regslice_both_s_axis_video_V_last_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_last_V_U->ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in);
    regslice_both_s_axis_video_V_last_V_U->data_out(s_axis_video_TLAST_int);
    regslice_both_s_axis_video_V_last_V_U->vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out);
    regslice_both_s_axis_video_V_last_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_last_V_U->apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk);
    regslice_both_s_axis_video_V_id_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_id_V_U");
    regslice_both_s_axis_video_V_id_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_id_V_U->data_in(s_axis_video_TID);
    regslice_both_s_axis_video_V_id_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_id_V_U->ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in);
    regslice_both_s_axis_video_V_id_V_U->data_out(s_axis_video_TID_int);
    regslice_both_s_axis_video_V_id_V_U->vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out);
    regslice_both_s_axis_video_V_id_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_id_V_U->apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk);
    regslice_both_s_axis_video_V_dest_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_dest_V_U");
    regslice_both_s_axis_video_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_dest_V_U->data_in(s_axis_video_TDEST);
    regslice_both_s_axis_video_V_dest_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_dest_V_U->ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in);
    regslice_both_s_axis_video_V_dest_V_U->data_out(s_axis_video_TDEST_int);
    regslice_both_s_axis_video_V_dest_V_U->vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out);
    regslice_both_s_axis_video_V_dest_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_dest_V_U->apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk);
    regslice_both_m_axis_video_V_data_V_U = new regslice_both<8>("regslice_both_m_axis_video_V_data_V_U");
    regslice_both_m_axis_video_V_data_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_data_V_U->data_in(tmp_data_V_reg_199);
    regslice_both_m_axis_video_V_data_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_data_V_U->ack_in(m_axis_video_TREADY_int);
    regslice_both_m_axis_video_V_data_V_U->data_out(m_axis_video_TDATA);
    regslice_both_m_axis_video_V_data_V_U->vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out);
    regslice_both_m_axis_video_V_data_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_data_V_U->apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk);
    regslice_both_m_axis_video_V_keep_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_keep_V_U");
    regslice_both_m_axis_video_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_keep_V_U->data_in(tmp_keep_V_reg_204);
    regslice_both_m_axis_video_V_keep_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_keep_V_U->ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_keep_V_U->data_out(m_axis_video_TKEEP);
    regslice_both_m_axis_video_V_keep_V_U->vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out);
    regslice_both_m_axis_video_V_keep_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_keep_V_U->apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk);
    regslice_both_m_axis_video_V_strb_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_strb_V_U");
    regslice_both_m_axis_video_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_strb_V_U->data_in(tmp_strb_V_reg_209);
    regslice_both_m_axis_video_V_strb_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_strb_V_U->ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_strb_V_U->data_out(m_axis_video_TSTRB);
    regslice_both_m_axis_video_V_strb_V_U->vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out);
    regslice_both_m_axis_video_V_strb_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_strb_V_U->apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk);
    regslice_both_m_axis_video_V_user_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_user_V_U");
    regslice_both_m_axis_video_V_user_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_user_V_U->data_in(tmp_user_V_reg_214);
    regslice_both_m_axis_video_V_user_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_user_V_U->ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_user_V_U->data_out(m_axis_video_TUSER);
    regslice_both_m_axis_video_V_user_V_U->vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out);
    regslice_both_m_axis_video_V_user_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_user_V_U->apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk);
    regslice_both_m_axis_video_V_last_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_last_V_U");
    regslice_both_m_axis_video_V_last_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_last_V_U->data_in(tmp_last_V_reg_219);
    regslice_both_m_axis_video_V_last_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_last_V_U->ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_last_V_U->data_out(m_axis_video_TLAST);
    regslice_both_m_axis_video_V_last_V_U->vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out);
    regslice_both_m_axis_video_V_last_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_last_V_U->apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk);
    regslice_both_m_axis_video_V_id_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_id_V_U");
    regslice_both_m_axis_video_V_id_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_id_V_U->data_in(tmp_id_V_reg_224);
    regslice_both_m_axis_video_V_id_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_id_V_U->ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_id_V_U->data_out(m_axis_video_TID);
    regslice_both_m_axis_video_V_id_V_U->vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out);
    regslice_both_m_axis_video_V_id_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_id_V_U->apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk);
    regslice_both_m_axis_video_V_dest_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_dest_V_U");
    regslice_both_m_axis_video_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_dest_V_U->data_in(tmp_dest_V_reg_229);
    regslice_both_m_axis_video_V_dest_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_dest_V_U->ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_dest_V_U->data_out(m_axis_video_TDEST);
    regslice_both_m_axis_video_V_dest_V_U->vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out);
    regslice_both_m_axis_video_V_dest_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_dest_V_U->apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln15_fu_151_p2);
    sensitive << ( indvar_flatten_reg_121 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln15_fu_146_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln15_fu_146_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln15_fu_146_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( icmp_ln15_fu_146_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( icmp_ln15_reg_190 );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( icmp_ln15_reg_190_pp0_iter1_reg );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln15_fu_146_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bound_fu_140_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bound_fu_140_p00 );

    SC_METHOD(thread_bound_fu_140_p00);
    sensitive << ( hsize_in );

    SC_METHOD(thread_bound_fu_140_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bound_fu_140_p10 );

    SC_METHOD(thread_bound_fu_140_p10);
    sensitive << ( vsize_in );

    SC_METHOD(thread_bound_fu_140_p2);
    sensitive << ( bound_fu_140_p0 );
    sensitive << ( bound_fu_140_p1 );

    SC_METHOD(thread_icmp_ln15_fu_146_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indvar_flatten_reg_121 );
    sensitive << ( bound_reg_185 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln15_reg_190 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln15_reg_190_pp0_iter1_reg );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_vld_out );

    SC_METHOD(thread_m_axis_video_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln15_reg_190 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_s_axis_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln15_fu_146_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_s_axis_video_TREADY);
    sensitive << ( s_axis_video_TVALID );
    sensitive << ( regslice_both_s_axis_video_V_data_V_U_ack_in );

    SC_METHOD(thread_s_axis_video_TREADY_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln15_fu_146_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln15_fu_146_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "c_grav_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, cg_on_V, "(port)cg_on_V");
    sc_trace(mVcdFile, s_axis_video_TDATA, "(port)s_axis_video_TDATA");
    sc_trace(mVcdFile, s_axis_video_TVALID, "(port)s_axis_video_TVALID");
    sc_trace(mVcdFile, s_axis_video_TREADY, "(port)s_axis_video_TREADY");
    sc_trace(mVcdFile, s_axis_video_TKEEP, "(port)s_axis_video_TKEEP");
    sc_trace(mVcdFile, s_axis_video_TSTRB, "(port)s_axis_video_TSTRB");
    sc_trace(mVcdFile, s_axis_video_TUSER, "(port)s_axis_video_TUSER");
    sc_trace(mVcdFile, s_axis_video_TLAST, "(port)s_axis_video_TLAST");
    sc_trace(mVcdFile, s_axis_video_TID, "(port)s_axis_video_TID");
    sc_trace(mVcdFile, s_axis_video_TDEST, "(port)s_axis_video_TDEST");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
    sc_trace(mVcdFile, hsize_in, "(port)hsize_in");
    sc_trace(mVcdFile, vsize_in, "(port)vsize_in");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, s_axis_video_TDATA_blk_n, "s_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln15_fu_146_p2, "icmp_ln15_fu_146_p2");
    sc_trace(mVcdFile, m_axis_video_TDATA_blk_n, "m_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, icmp_ln15_reg_190, "icmp_ln15_reg_190");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln15_reg_190_pp0_iter1_reg, "icmp_ln15_reg_190_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_121, "indvar_flatten_reg_121");
    sc_trace(mVcdFile, bound_fu_140_p2, "bound_fu_140_p2");
    sc_trace(mVcdFile, bound_reg_185, "bound_reg_185");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln15_fu_151_p2, "add_ln15_fu_151_p2");
    sc_trace(mVcdFile, tmp_data_V_reg_199, "tmp_data_V_reg_199");
    sc_trace(mVcdFile, tmp_keep_V_reg_204, "tmp_keep_V_reg_204");
    sc_trace(mVcdFile, tmp_strb_V_reg_209, "tmp_strb_V_reg_209");
    sc_trace(mVcdFile, tmp_user_V_reg_214, "tmp_user_V_reg_214");
    sc_trace(mVcdFile, tmp_last_V_reg_219, "tmp_last_V_reg_219");
    sc_trace(mVcdFile, tmp_id_V_reg_224, "tmp_id_V_reg_224");
    sc_trace(mVcdFile, tmp_dest_V_reg_229, "tmp_dest_V_reg_229");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, bound_fu_140_p0, "bound_fu_140_p0");
    sc_trace(mVcdFile, bound_fu_140_p1, "bound_fu_140_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_data_V_U_apdone_blk, "regslice_both_m_axis_video_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_data_V_U_apdone_blk, "regslice_both_s_axis_video_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TDATA_int, "s_axis_video_TDATA_int");
    sc_trace(mVcdFile, s_axis_video_TVALID_int, "s_axis_video_TVALID_int");
    sc_trace(mVcdFile, s_axis_video_TREADY_int, "s_axis_video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_data_V_U_ack_in, "regslice_both_s_axis_video_V_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_apdone_blk, "regslice_both_s_axis_video_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TKEEP_int, "s_axis_video_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_vld_out, "regslice_both_s_axis_video_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_ack_in, "regslice_both_s_axis_video_V_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_apdone_blk, "regslice_both_s_axis_video_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TSTRB_int, "s_axis_video_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_vld_out, "regslice_both_s_axis_video_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_ack_in, "regslice_both_s_axis_video_V_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_apdone_blk, "regslice_both_s_axis_video_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TUSER_int, "s_axis_video_TUSER_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_vld_out, "regslice_both_s_axis_video_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_ack_in, "regslice_both_s_axis_video_V_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_apdone_blk, "regslice_both_s_axis_video_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TLAST_int, "s_axis_video_TLAST_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_vld_out, "regslice_both_s_axis_video_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_ack_in, "regslice_both_s_axis_video_V_last_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_apdone_blk, "regslice_both_s_axis_video_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TID_int, "s_axis_video_TID_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_vld_out, "regslice_both_s_axis_video_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_ack_in, "regslice_both_s_axis_video_V_id_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_apdone_blk, "regslice_both_s_axis_video_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TDEST_int, "s_axis_video_TDEST_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_vld_out, "regslice_both_s_axis_video_V_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_ack_in, "regslice_both_s_axis_video_V_dest_V_U_ack_in");
    sc_trace(mVcdFile, m_axis_video_TVALID_int, "m_axis_video_TVALID_int");
    sc_trace(mVcdFile, m_axis_video_TREADY_int, "m_axis_video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_data_V_U_vld_out, "regslice_both_m_axis_video_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_apdone_blk, "regslice_both_m_axis_video_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_vld_out, "regslice_both_m_axis_video_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_apdone_blk, "regslice_both_m_axis_video_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_vld_out, "regslice_both_m_axis_video_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_apdone_blk, "regslice_both_m_axis_video_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_vld_out, "regslice_both_m_axis_video_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_apdone_blk, "regslice_both_m_axis_video_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_vld_out, "regslice_both_m_axis_video_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_apdone_blk, "regslice_both_m_axis_video_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_id_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_vld_out, "regslice_both_m_axis_video_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_apdone_blk, "regslice_both_m_axis_video_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_vld_out, "regslice_both_m_axis_video_V_dest_V_U_vld_out");
    sc_trace(mVcdFile, bound_fu_140_p00, "bound_fu_140_p00");
    sc_trace(mVcdFile, bound_fu_140_p10, "bound_fu_140_p10");
#endif

    }
    mHdltvinHandle.open("c_grav.hdltvin.dat");
    mHdltvoutHandle.open("c_grav.hdltvout.dat");
}

c_grav::~c_grav() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete regslice_both_s_axis_video_V_data_V_U;
    delete regslice_both_s_axis_video_V_keep_V_U;
    delete regslice_both_s_axis_video_V_strb_V_U;
    delete regslice_both_s_axis_video_V_user_V_U;
    delete regslice_both_s_axis_video_V_last_V_U;
    delete regslice_both_s_axis_video_V_id_V_U;
    delete regslice_both_s_axis_video_V_dest_V_U;
    delete regslice_both_m_axis_video_V_data_V_U;
    delete regslice_both_m_axis_video_V_keep_V_U;
    delete regslice_both_m_axis_video_V_strb_V_U;
    delete regslice_both_m_axis_video_V_user_V_U;
    delete regslice_both_m_axis_video_V_last_V_U;
    delete regslice_both_m_axis_video_V_id_V_U;
    delete regslice_both_m_axis_video_V_dest_V_U;
}

void c_grav::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_reg_121 = add_ln15_fu_151_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_121 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        bound_reg_185 = bound_fu_140_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln15_reg_190 = icmp_ln15_fu_146_p2.read();
        icmp_ln15_reg_190_pp0_iter1_reg = icmp_ln15_reg_190.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_reg_199 = s_axis_video_TDATA_int.read();
        tmp_dest_V_reg_229 = s_axis_video_TDEST_int.read();
        tmp_id_V_reg_224 = s_axis_video_TID_int.read();
        tmp_keep_V_reg_204 = s_axis_video_TKEEP_int.read();
        tmp_last_V_reg_219 = s_axis_video_TLAST_int.read();
        tmp_strb_V_reg_209 = s_axis_video_TSTRB_int.read();
        tmp_user_V_reg_214 = s_axis_video_TUSER_int.read();
    }
}

void c_grav::thread_add_ln15_fu_151_p2() {
    add_ln15_fu_151_p2 = (!indvar_flatten_reg_121.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(indvar_flatten_reg_121.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void c_grav::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void c_grav::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void c_grav::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void c_grav::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void c_grav::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()));
}

void c_grav::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())));
}

void c_grav::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())));
}

void c_grav::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()));
}

void c_grav::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_reg_190.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY_int.read()));
}

void c_grav::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void c_grav::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_reg_190_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY_int.read()));
}

void c_grav::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void c_grav::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void c_grav::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void c_grav::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void c_grav::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void c_grav::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void c_grav::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void c_grav::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void c_grav::thread_bound_fu_140_p0() {
    bound_fu_140_p0 =  (sc_lv<32>) (bound_fu_140_p00.read());
}

void c_grav::thread_bound_fu_140_p00() {
    bound_fu_140_p00 = esl_zext<64,32>(hsize_in.read());
}

void c_grav::thread_bound_fu_140_p1() {
    bound_fu_140_p1 =  (sc_lv<32>) (bound_fu_140_p10.read());
}

void c_grav::thread_bound_fu_140_p10() {
    bound_fu_140_p10 = esl_zext<64,32>(vsize_in.read());
}

void c_grav::thread_bound_fu_140_p2() {
    bound_fu_140_p2 = (!bound_fu_140_p0.read().is_01() || !bound_fu_140_p1.read().is_01())? sc_lv<64>(): sc_biguint<32>(bound_fu_140_p0.read()) * sc_biguint<32>(bound_fu_140_p1.read());
}

void c_grav::thread_icmp_ln15_fu_146_p2() {
    icmp_ln15_fu_146_p2 = (!indvar_flatten_reg_121.read().is_01() || !bound_reg_185.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_121.read() == bound_reg_185.read());
}

void c_grav::thread_m_axis_video_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_reg_190.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_reg_190_pp0_iter1_reg.read())))) {
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int.read();
    } else {
        m_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void c_grav::thread_m_axis_video_TVALID() {
    m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out.read();
}

void c_grav::thread_m_axis_video_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_reg_190.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_TVALID_int = ap_const_logic_1;
    } else {
        m_axis_video_TVALID_int = ap_const_logic_0;
    }
}

void c_grav::thread_s_axis_video_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_0))) {
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int.read();
    } else {
        s_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void c_grav::thread_s_axis_video_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_s_axis_video_V_data_V_U_ack_in.read()))) {
        s_axis_video_TREADY = ap_const_logic_1;
    } else {
        s_axis_video_TREADY = ap_const_logic_0;
    }
}

void c_grav::thread_s_axis_video_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        s_axis_video_TREADY_int = ap_const_logic_1;
    } else {
        s_axis_video_TREADY_int = ap_const_logic_0;
    }
}

void c_grav::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln15_fu_146_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void c_grav::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cg_on_V\" :  \"" << cg_on_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDATA\" :  \"" << s_axis_video_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TVALID\" :  \"" << s_axis_video_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axis_video_TREADY\" :  \"" << s_axis_video_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TKEEP\" :  \"" << s_axis_video_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TSTRB\" :  \"" << s_axis_video_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TUSER\" :  \"" << s_axis_video_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TLAST\" :  \"" << s_axis_video_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TID\" :  \"" << s_axis_video_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDEST\" :  \"" << s_axis_video_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDATA\" :  \"" << m_axis_video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TVALID\" :  \"" << m_axis_video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_TREADY\" :  \"" << m_axis_video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TKEEP\" :  \"" << m_axis_video_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TSTRB\" :  \"" << m_axis_video_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TUSER\" :  \"" << m_axis_video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TLAST\" :  \"" << m_axis_video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TID\" :  \"" << m_axis_video_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDEST\" :  \"" << m_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hsize_in\" :  \"" << hsize_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vsize_in\" :  \"" << vsize_in.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

