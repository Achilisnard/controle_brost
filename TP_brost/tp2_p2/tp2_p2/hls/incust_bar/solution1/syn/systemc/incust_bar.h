// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _incust_bar_HH_
#define _incust_bar_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "incust_bar_im_incbkb.h"
#include "incust_bar_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct incust_bar : public sc_module {
    // Port declarations 41
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > s_axis_video_TDATA;
    sc_in< sc_logic > s_axis_video_TVALID;
    sc_out< sc_logic > s_axis_video_TREADY;
    sc_in< sc_lv<1> > s_axis_video_TKEEP;
    sc_in< sc_lv<1> > s_axis_video_TSTRB;
    sc_in< sc_lv<1> > s_axis_video_TUSER;
    sc_in< sc_lv<1> > s_axis_video_TLAST;
    sc_in< sc_lv<1> > s_axis_video_TID;
    sc_in< sc_lv<1> > s_axis_video_TDEST;
    sc_out< sc_lv<8> > m_axis_video_TDATA;
    sc_out< sc_logic > m_axis_video_TVALID;
    sc_in< sc_logic > m_axis_video_TREADY;
    sc_out< sc_lv<1> > m_axis_video_TKEEP;
    sc_out< sc_lv<1> > m_axis_video_TSTRB;
    sc_out< sc_lv<1> > m_axis_video_TUSER;
    sc_out< sc_lv<1> > m_axis_video_TLAST;
    sc_out< sc_lv<1> > m_axis_video_TID;
    sc_out< sc_lv<1> > m_axis_video_TDEST;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    incust_bar(sc_module_name name);
    SC_HAS_PROCESS(incust_bar);

    ~incust_bar();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    incust_bar_im_incbkb* im_incrust_V_U;
    incust_bar_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* incust_bar_AXILiteS_s_axi_U;
    regslice_both<8>* regslice_both_s_axis_video_V_data_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_keep_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_strb_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_user_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_last_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_id_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_dest_V_U;
    regslice_both<8>* regslice_both_m_axis_video_V_data_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_keep_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_strb_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_user_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_last_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_id_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_dest_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > start_x;
    sc_signal< sc_lv<32> > start_y;
    sc_signal< sc_lv<11> > im_incrust_V_address0;
    sc_signal< sc_logic > im_incrust_V_ce0;
    sc_signal< sc_lv<1> > im_incrust_V_q0;
    sc_signal< sc_logic > s_axis_video_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > m_axis_video_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > start_y_read_reg_366;
    sc_signal< sc_lv<32> > start_x_read_reg_371;
    sc_signal< sc_lv<32> > add_ln24_fu_184_p2;
    sc_signal< sc_lv<32> > add_ln24_reg_376;
    sc_signal< sc_lv<32> > add_ln24_1_fu_190_p2;
    sc_signal< sc_lv<32> > add_ln24_1_reg_381;
    sc_signal< sc_lv<9> > i_fu_211_p2;
    sc_signal< sc_lv<9> > i_reg_389;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<1> > and_ln24_1_fu_233_p2;
    sc_signal< sc_lv<1> > and_ln24_1_reg_394;
    sc_signal< sc_lv<1> > icmp_ln19_fu_205_p2;
    sc_signal< sc_lv<10> > j_fu_249_p2;
    sc_signal< sc_lv<10> > j_reg_402;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > and_ln24_2_fu_280_p2;
    sc_signal< sc_lv<1> > and_ln24_2_reg_407;
    sc_signal< sc_lv<1> > icmp_ln21_fu_243_p2;
    sc_signal< sc_lv<9> > i_0_reg_162;
    sc_signal< sc_lv<10> > j_0_reg_173;
    sc_signal< sc_lv<64> > sext_ln25_fu_285_p1;
    sc_signal< sc_lv<32> > pixel_1_fu_90;
    sc_signal< sc_lv<32> > pixel_2_fu_296_p3;
    sc_signal< sc_lv<32> > zext_ln19_fu_201_p1;
    sc_signal< sc_lv<1> > icmp_ln24_fu_217_p2;
    sc_signal< sc_lv<1> > xor_ln24_fu_222_p2;
    sc_signal< sc_lv<1> > icmp_ln24_1_fu_228_p2;
    sc_signal< sc_lv<32> > zext_ln21_fu_239_p1;
    sc_signal< sc_lv<1> > icmp_ln24_2_fu_258_p2;
    sc_signal< sc_lv<1> > xor_ln24_1_fu_263_p2;
    sc_signal< sc_lv<1> > icmp_ln24_3_fu_269_p2;
    sc_signal< sc_lv<1> > and_ln24_fu_274_p2;
    sc_signal< sc_lv<32> > sext_ln25_fu_285_p0;
    sc_signal< sc_lv<32> > pixel_fu_290_p1;
    sc_signal< sc_lv<32> > pixel_fu_290_p2;
    sc_signal< sc_lv<32> > pixel_2_fu_296_p2;
    sc_signal< sc_lv<8> > select_ln321_fu_343_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<8> > s_axis_video_TDATA_int;
    sc_signal< sc_logic > s_axis_video_TVALID_int;
    sc_signal< sc_logic > s_axis_video_TREADY_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TKEEP_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TSTRB_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_strb_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_user_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TUSER_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_user_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TLAST_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_last_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_id_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TID_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_id_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TDEST_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_dest_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_dest_V_U_ack_in;
    sc_signal< sc_lv<8> > m_axis_video_TDATA_int;
    sc_signal< sc_logic > m_axis_video_TVALID_int;
    sc_signal< sc_logic > m_axis_video_TREADY_int;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_94;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<9> ap_const_lv9_1E0;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<10> ap_const_lv10_280;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln24_1_fu_190_p2();
    void thread_add_ln24_fu_184_p2();
    void thread_and_ln24_1_fu_233_p2();
    void thread_and_ln24_2_fu_280_p2();
    void thread_and_ln24_fu_274_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_i_fu_211_p2();
    void thread_icmp_ln19_fu_205_p2();
    void thread_icmp_ln21_fu_243_p2();
    void thread_icmp_ln24_1_fu_228_p2();
    void thread_icmp_ln24_2_fu_258_p2();
    void thread_icmp_ln24_3_fu_269_p2();
    void thread_icmp_ln24_fu_217_p2();
    void thread_im_incrust_V_address0();
    void thread_im_incrust_V_ce0();
    void thread_j_fu_249_p2();
    void thread_m_axis_video_TDATA_blk_n();
    void thread_m_axis_video_TDATA_int();
    void thread_m_axis_video_TVALID();
    void thread_m_axis_video_TVALID_int();
    void thread_pixel_2_fu_296_p2();
    void thread_pixel_2_fu_296_p3();
    void thread_pixel_fu_290_p1();
    void thread_pixel_fu_290_p2();
    void thread_s_axis_video_TDATA_blk_n();
    void thread_s_axis_video_TREADY();
    void thread_s_axis_video_TREADY_int();
    void thread_select_ln321_fu_343_p3();
    void thread_sext_ln25_fu_285_p0();
    void thread_sext_ln25_fu_285_p1();
    void thread_xor_ln24_1_fu_263_p2();
    void thread_xor_ln24_fu_222_p2();
    void thread_zext_ln19_fu_201_p1();
    void thread_zext_ln21_fu_239_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
