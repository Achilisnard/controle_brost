

================================================================
== Vivado HLS Report for 'im_load'
================================================================
* Date:           Wed Oct  4 15:07:57 2023

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        im_load
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 6.885 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+--------+--------+---------+
    |  Latency (cycles) |  Latency (absolute) |     Interval    | Pipeline|
    |   min   |   max   |    min   |    max   |   min  |   max  |   Type  |
    +---------+---------+----------+----------+--------+--------+---------+
    |   922561|   922561| 9.226 ms | 9.226 ms |  922561|  922561|   none  |
    +---------+---------+----------+----------+--------+--------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+---------+---------+----------+-----------+-----------+------+----------+
        |             |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Loop 1     |   922560|   922560|      1922|          -|          -|   480|    no    |
        | + Loop 1.1  |     1920|     1920|         3|          -|          -|   640|    no    |
        +-------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 2 
4 --> 5 
5 --> 3 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.91>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i2 %mode_V), !map !47"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %m_axis_video_V_data_V), !map !53"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %m_axis_video_V_keep_V), !map !57"   --->   Operation 8 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %m_axis_video_V_strb_V), !map !61"   --->   Operation 9 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %m_axis_video_V_user_V), !map !65"   --->   Operation 10 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %m_axis_video_V_last_V), !map !69"   --->   Operation 11 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %m_axis_video_V_id_V), !map !73"   --->   Operation 12 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %m_axis_video_V_dest_V), !map !77"   --->   Operation 13 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([307200 x i8]* %mem_V), !map !81"   --->   Operation 14 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([8 x i8]* @im_load_str) nounwind"   --->   Operation 15 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%mode_V_read = call i2 @_ssdm_op_Read.ap_auto.i2(i2 %mode_V)"   --->   Operation 16 'read' 'mode_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %m_axis_video_V_data_V, i1* %m_axis_video_V_keep_V, i1* %m_axis_video_V_strb_V, i1* %m_axis_video_V_user_V, i1* %m_axis_video_V_last_V, i1* %m_axis_video_V_id_V, i1* %m_axis_video_V_dest_V, [5 x i8]* @p_str, i32 1, i32 1, [5 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [im_load/im_load.cpp:12]   --->   Operation 17 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.95ns)   --->   "%icmp_ln879 = icmp eq i2 %mode_V_read, 0" [im_load/im_load.cpp:30]   --->   Operation 18 'icmp' 'icmp_ln879' <Predicate = true> <Delay = 0.95> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (0.95ns)   --->   "%icmp_ln879_1 = icmp eq i2 %mode_V_read, 1" [im_load/im_load.cpp:33]   --->   Operation 19 'icmp' 'icmp_ln879_1' <Predicate = true> <Delay = 0.95> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.95ns)   --->   "%icmp_ln879_2 = icmp eq i2 %mode_V_read, -2" [im_load/im_load.cpp:36]   --->   Operation 20 'icmp' 'icmp_ln879_2' <Predicate = true> <Delay = 0.95> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 21 [1/1] (0.00ns) (grouped into LUT with out node or_ln879_1)   --->   "%xor_ln879 = xor i1 %icmp_ln879, true" [im_load/im_load.cpp:30]   --->   Operation 21 'xor' 'xor_ln879' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 22 [1/1] (0.00ns) (grouped into LUT with out node or_ln879_1)   --->   "%and_ln879 = and i1 %icmp_ln879_1, %xor_ln879" [im_load/im_load.cpp:33]   --->   Operation 22 'and' 'and_ln879' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 23 [1/1] (0.00ns) (grouped into LUT with out node and_ln879_1)   --->   "%or_ln879 = or i1 %icmp_ln879, %icmp_ln879_1" [im_load/im_load.cpp:33]   --->   Operation 23 'or' 'or_ln879' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 24 [1/1] (0.00ns) (grouped into LUT with out node and_ln879_1)   --->   "%xor_ln879_1 = xor i1 %or_ln879, true" [im_load/im_load.cpp:33]   --->   Operation 24 'xor' 'xor_ln879_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 25 [1/1] (0.97ns) (out node of the LUT)   --->   "%and_ln879_1 = and i1 %icmp_ln879_2, %xor_ln879_1" [im_load/im_load.cpp:36]   --->   Operation 25 'and' 'and_ln879_1' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (0.97ns) (out node of the LUT)   --->   "%or_ln879_1 = or i1 %and_ln879_1, %and_ln879" [im_load/im_load.cpp:36]   --->   Operation 26 'or' 'or_ln879_1' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 27 [1/1] (1.76ns)   --->   "br label %.loopexit" [im_load/im_load.cpp:16]   --->   Operation 27 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 6.12>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "%i_0 = phi i9 [ 0, %0 ], [ %i, %.loopexit.loopexit ]"   --->   Operation 28 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (1.66ns)   --->   "%icmp_ln16 = icmp eq i9 %i_0, -32" [im_load/im_load.cpp:16]   --->   Operation 29 'icmp' 'icmp_ln16' <Predicate = true> <Delay = 1.66> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 480, i64 480, i64 480)"   --->   Operation 30 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 31 [1/1] (1.82ns)   --->   "%i = add i9 %i_0, 1" [im_load/im_load.cpp:16]   --->   Operation 31 'add' 'i' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "br i1 %icmp_ln16, label %1, label %.preheader.preheader" [im_load/im_load.cpp:16]   --->   Operation 32 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%shl_ln = call i18 @_ssdm_op_BitConcatenate.i18.i9.i9(i9 %i_0, i9 0)" [im_load/im_load.cpp:31]   --->   Operation 33 'bitconcatenate' 'shl_ln' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "%zext_ln31 = zext i18 %shl_ln to i19" [im_load/im_load.cpp:31]   --->   Operation 34 'zext' 'zext_ln31' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%shl_ln31_1 = call i16 @_ssdm_op_BitConcatenate.i16.i9.i7(i9 %i_0, i7 0)" [im_load/im_load.cpp:31]   --->   Operation 35 'bitconcatenate' 'shl_ln31_1' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 36 [1/1] (0.00ns)   --->   "%zext_ln31_1 = zext i16 %shl_ln31_1 to i19" [im_load/im_load.cpp:31]   --->   Operation 36 'zext' 'zext_ln31_1' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 37 [1/1] (2.13ns)   --->   "%add_ln31_1 = add i19 %zext_ln31_1, %zext_ln31" [im_load/im_load.cpp:31]   --->   Operation 37 'add' 'add_ln31_1' <Predicate = (!icmp_ln16)> <Delay = 2.13> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (1.82ns)   --->   "%sub_ln34 = sub i9 -32, %i_0" [im_load/im_load.cpp:34]   --->   Operation 38 'sub' 'sub_ln34' <Predicate = (!icmp_ln16)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%shl_ln1 = call i18 @_ssdm_op_BitConcatenate.i18.i9.i9(i9 %sub_ln34, i9 0)" [im_load/im_load.cpp:34]   --->   Operation 39 'bitconcatenate' 'shl_ln1' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%zext_ln34 = zext i18 %shl_ln1 to i19" [im_load/im_load.cpp:34]   --->   Operation 40 'zext' 'zext_ln34' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%shl_ln34_1 = call i16 @_ssdm_op_BitConcatenate.i16.i9.i7(i9 %sub_ln34, i7 0)" [im_load/im_load.cpp:34]   --->   Operation 41 'bitconcatenate' 'shl_ln34_1' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%zext_ln34_1 = zext i16 %shl_ln34_1 to i19" [im_load/im_load.cpp:34]   --->   Operation 42 'zext' 'zext_ln34_1' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (2.13ns)   --->   "%add_ln34_1 = add i19 %zext_ln34_1, %zext_ln34" [im_load/im_load.cpp:34]   --->   Operation 43 'add' 'add_ln34_1' <Predicate = (!icmp_ln16)> <Delay = 2.13> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 44 [1/1] (2.16ns)   --->   "%add_ln37 = add i19 %add_ln31_1, 640" [im_load/im_load.cpp:37]   --->   Operation 44 'add' 'add_ln37' <Predicate = (!icmp_ln16 & and_ln879_1 & or_ln879_1)> <Delay = 2.16> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 45 [1/1] (2.16ns)   --->   "%add_ln40 = add i19 %add_ln34_1, 640" [im_load/im_load.cpp:40]   --->   Operation 45 'add' 'add_ln40' <Predicate = (!icmp_ln16 & !icmp_ln879 & !or_ln879_1)> <Delay = 2.16> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 46 [1/1] (1.76ns)   --->   "br label %.preheader"   --->   Operation 46 'br' <Predicate = (!icmp_ln16)> <Delay = 1.76>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "ret void" [im_load/im_load.cpp:48]   --->   Operation 47 'ret' <Predicate = (icmp_ln16)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 6.88>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "%j_0 = phi i10 [ %j, %_ifconv ], [ 0, %.preheader.preheader ]"   --->   Operation 48 'phi' 'j_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 49 [1/1] (0.00ns)   --->   "%zext_ln19 = zext i10 %j_0 to i19" [im_load/im_load.cpp:19]   --->   Operation 49 'zext' 'zext_ln19' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (1.77ns)   --->   "%icmp_ln19 = icmp eq i10 %j_0, -384" [im_load/im_load.cpp:19]   --->   Operation 50 'icmp' 'icmp_ln19' <Predicate = true> <Delay = 1.77> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 51 [1/1] (0.00ns)   --->   "%empty_2 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 640, i64 640, i64 640)"   --->   Operation 51 'speclooptripcount' 'empty_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 52 [1/1] (1.73ns)   --->   "%j = add i10 %j_0, 1" [im_load/im_load.cpp:19]   --->   Operation 52 'add' 'j' <Predicate = true> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "br i1 %icmp_ln19, label %.loopexit.loopexit, label %_ifconv" [im_load/im_load.cpp:19]   --->   Operation 53 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node tmp_user_V)   --->   "%trunc_ln21 = trunc i10 %j_0 to i9" [im_load/im_load.cpp:21]   --->   Operation 54 'trunc' 'trunc_ln21' <Predicate = (!icmp_ln19)> <Delay = 0.00>
ST_3 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node tmp_user_V)   --->   "%or_ln21 = or i9 %trunc_ln21, %i_0" [im_load/im_load.cpp:21]   --->   Operation 55 'or' 'or_ln21' <Predicate = (!icmp_ln19)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 56 [1/1] (0.00ns) (grouped into LUT with out node tmp_user_V)   --->   "%tmp = call i1 @_ssdm_op_BitSelect.i1.i10.i32(i10 %j_0, i32 9)" [im_load/im_load.cpp:21]   --->   Operation 56 'bitselect' 'tmp' <Predicate = (!icmp_ln19)> <Delay = 0.00>
ST_3 : Operation 57 [1/1] (0.00ns) (grouped into LUT with out node tmp_user_V)   --->   "%or_ln = call i10 @_ssdm_op_BitConcatenate.i10.i1.i9(i1 %tmp, i9 %or_ln21)" [im_load/im_load.cpp:21]   --->   Operation 57 'bitconcatenate' 'or_ln' <Predicate = (!icmp_ln19)> <Delay = 0.00>
ST_3 : Operation 58 [1/1] (1.77ns) (out node of the LUT)   --->   "%tmp_user_V = icmp eq i10 %or_ln, 0" [im_load/im_load.cpp:21]   --->   Operation 58 'icmp' 'tmp_user_V' <Predicate = (!icmp_ln19)> <Delay = 1.77> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 59 [1/1] (1.77ns)   --->   "%tmp_last_V = icmp eq i10 %j_0, -385" [im_load/im_load.cpp:26]   --->   Operation 59 'icmp' 'tmp_last_V' <Predicate = (!icmp_ln19)> <Delay = 1.77> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 60 [1/1] (2.16ns)   --->   "%add_ln31 = add i19 %add_ln31_1, %zext_ln19" [im_load/im_load.cpp:31]   --->   Operation 60 'add' 'add_ln31' <Predicate = (!icmp_ln19 & icmp_ln879 & !or_ln879_1)> <Delay = 2.16> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 61 [1/1] (2.16ns)   --->   "%add_ln34 = add i19 %add_ln34_1, %zext_ln19" [im_load/im_load.cpp:34]   --->   Operation 61 'add' 'add_ln34' <Predicate = (!icmp_ln19 & !and_ln879_1 & or_ln879_1)> <Delay = 2.16> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 62 [1/1] (2.16ns)   --->   "%sub_ln37 = sub i19 %add_ln37, %zext_ln19" [im_load/im_load.cpp:37]   --->   Operation 62 'sub' 'sub_ln37' <Predicate = (!icmp_ln19 & and_ln879_1 & or_ln879_1)> <Delay = 2.16> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 63 [1/1] (2.16ns)   --->   "%sub_ln40 = sub i19 %add_ln40, %zext_ln19" [im_load/im_load.cpp:40]   --->   Operation 63 'sub' 'sub_ln40' <Predicate = (!icmp_ln19 & !icmp_ln879 & !or_ln879_1)> <Delay = 2.16> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 64 [1/1] (0.00ns) (grouped into LUT with out node select_ln879_2)   --->   "%select_ln879 = select i1 %and_ln879_1, i19 %sub_ln37, i19 %add_ln34" [im_load/im_load.cpp:36]   --->   Operation 64 'select' 'select_ln879' <Predicate = (!icmp_ln19 & or_ln879_1)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 65 [1/1] (0.73ns) (out node of the LUT)   --->   "%select_ln879_1 = select i1 %icmp_ln879, i19 %add_ln31, i19 %sub_ln40" [im_load/im_load.cpp:36]   --->   Operation 65 'select' 'select_ln879_1' <Predicate = (!icmp_ln19 & !or_ln879_1)> <Delay = 0.73> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 66 [1/1] (0.73ns) (out node of the LUT)   --->   "%select_ln879_2 = select i1 %or_ln879_1, i19 %select_ln879, i19 %select_ln879_1" [im_load/im_load.cpp:36]   --->   Operation 66 'select' 'select_ln879_2' <Predicate = (!icmp_ln19)> <Delay = 0.73> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 67 [1/1] (0.00ns)   --->   "%zext_ln879 = zext i19 %select_ln879_2 to i64" [im_load/im_load.cpp:36]   --->   Operation 67 'zext' 'zext_ln879' <Predicate = (!icmp_ln19)> <Delay = 0.00>
ST_3 : Operation 68 [1/1] (0.00ns)   --->   "%mem_V_addr = getelementptr [307200 x i8]* %mem_V, i64 0, i64 %zext_ln879" [im_load/im_load.cpp:37]   --->   Operation 68 'getelementptr' 'mem_V_addr' <Predicate = (!icmp_ln19)> <Delay = 0.00>
ST_3 : Operation 69 [2/2] (3.25ns)   --->   "%video_data_V = load i8* %mem_V_addr, align 1" [im_load/im_load.cpp:36]   --->   Operation 69 'load' 'video_data_V' <Predicate = (!icmp_ln19)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 307200> <RAM>
ST_3 : Operation 70 [1/1] (0.00ns)   --->   "br label %.loopexit"   --->   Operation 70 'br' <Predicate = (icmp_ln19)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 3.25>
ST_4 : Operation 71 [1/2] (3.25ns)   --->   "%video_data_V = load i8* %mem_V_addr, align 1" [im_load/im_load.cpp:36]   --->   Operation 71 'load' 'video_data_V' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 307200> <RAM>
ST_4 : Operation 72 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i8P.i1P.i1P.i1P.i1P.i1P.i1P(i8* %m_axis_video_V_data_V, i1* %m_axis_video_V_keep_V, i1* %m_axis_video_V_strb_V, i1* %m_axis_video_V_user_V, i1* %m_axis_video_V_last_V, i1* %m_axis_video_V_id_V, i1* %m_axis_video_V_dest_V, i8 %video_data_V, i1 undef, i1 undef, i1 %tmp_user_V, i1 %tmp_last_V, i1 undef, i1 undef)" [im_load/im_load.cpp:44]   --->   Operation 72 'write' <Predicate = true> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 5 <SV = 4> <Delay = 0.00>
ST_5 : Operation 73 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i8P.i1P.i1P.i1P.i1P.i1P.i1P(i8* %m_axis_video_V_data_V, i1* %m_axis_video_V_keep_V, i1* %m_axis_video_V_strb_V, i1* %m_axis_video_V_user_V, i1* %m_axis_video_V_last_V, i1* %m_axis_video_V_id_V, i1* %m_axis_video_V_dest_V, i8 %video_data_V, i1 undef, i1 undef, i1 %tmp_user_V, i1 %tmp_last_V, i1 undef, i1 undef)" [im_load/im_load.cpp:44]   --->   Operation 73 'write' <Predicate = true> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_5 : Operation 74 [1/1] (0.00ns)   --->   "br label %.preheader" [im_load/im_load.cpp:19]   --->   Operation 74 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.92ns
The critical path consists of the following:
	wire read on port 'mode_V' [20]  (0 ns)
	'icmp' operation ('icmp_ln879', im_load/im_load.cpp:30) [22]  (0.959 ns)
	'or' operation ('or_ln879', im_load/im_load.cpp:33) [27]  (0 ns)
	'xor' operation ('xor_ln879_1', im_load/im_load.cpp:33) [28]  (0 ns)
	'and' operation ('and_ln879_1', im_load/im_load.cpp:36) [29]  (0.978 ns)
	'or' operation ('or_ln879_1', im_load/im_load.cpp:36) [30]  (0.978 ns)

 <State 2>: 6.13ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', im_load/im_load.cpp:16) [33]  (0 ns)
	'sub' operation ('sub_ln34', im_load/im_load.cpp:34) [44]  (1.82 ns)
	'add' operation ('add_ln34_1', im_load/im_load.cpp:34) [49]  (2.14 ns)
	'add' operation ('add_ln40', im_load/im_load.cpp:40) [51]  (2.17 ns)

 <State 3>: 6.88ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', im_load/im_load.cpp:19) [54]  (0 ns)
	'add' operation ('add_ln31', im_load/im_load.cpp:31) [67]  (2.17 ns)
	'select' operation ('select_ln879_1', im_load/im_load.cpp:36) [72]  (0.732 ns)
	'select' operation ('select_ln879_2', im_load/im_load.cpp:36) [73]  (0.732 ns)
	'getelementptr' operation ('mem_V_addr', im_load/im_load.cpp:37) [75]  (0 ns)
	'load' operation ('video.data.V', im_load/im_load.cpp:36) on array 'mem_V' [76]  (3.25 ns)

 <State 4>: 3.25ns
The critical path consists of the following:
	'load' operation ('video.data.V', im_load/im_load.cpp:36) on array 'mem_V' [76]  (3.25 ns)

 <State 5>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
