-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity c_grav is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    hsize_in : IN STD_LOGIC_VECTOR (31 downto 0);
    vsize_in : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of c_grav is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "c_grav,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1532,HLS_SYN_LUT=1589,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_7D : STD_LOGIC_VECTOR (7 downto 0) := "01111101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cgy_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    signal cgx_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    signal s_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln18_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln18_reg_477_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_135 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_146 : STD_LOGIC_VECTOR (30 downto 0);
    signal nb_1_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgx_1_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgy_1_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_194 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_data_V_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_465 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln20_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln18_reg_481 : STD_LOGIC_VECTOR (63 downto 0);
    signal cgy_r_load_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_fu_270_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln18_reg_491 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln18_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_1_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_1_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_2_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_2_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_361_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_557 : STD_LOGIC_VECTOR (30 downto 0);
    signal cgx_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgx_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgy_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgy_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_2_fu_409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgx_2_fu_416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgy_2_fu_423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_139_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_0_phi_fu_150_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_j_0_phi_fu_198_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_tmp_data_V_phi_fu_210_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_V_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_V_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln25_fu_379_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_1_fu_264_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln18_1_fu_281_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_1_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_2_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_fu_355_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_3_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_3_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_436_ap_start : STD_LOGIC;
    signal grp_fu_436_ap_done : STD_LOGIC;
    signal grp_fu_436_ce : STD_LOGIC;
    signal grp_fu_442_ap_start : STD_LOGIC;
    signal grp_fu_442_ap_done : STD_LOGIC;
    signal grp_fu_442_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal s_axis_video_TVALID_int : STD_LOGIC;
    signal s_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TKEEP_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TSTRB_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal m_axis_video_TVALID_int : STD_LOGIC;
    signal m_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal bound_fu_238_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_238_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_283 : BOOLEAN;
    signal ap_condition_255 : BOOLEAN;

    component c_grav_udiv_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    c_grav_udiv_32ns_bkb_U1 : component c_grav_udiv_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_436_ap_start,
        done => grp_fu_436_ap_done,
        din0 => cgx_1_reg_170,
        din1 => nb_1_reg_158,
        ce => grp_fu_436_ce,
        dout => grp_fu_436_p2);

    c_grav_udiv_32ns_bkb_U2 : component c_grav_udiv_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_442_ap_start,
        done => grp_fu_442_ap_done,
        din0 => cgy_1_reg_182,
        din1 => nb_1_reg_158,
        ce => grp_fu_442_ce,
        dout => grp_fu_442_p2);

    regslice_both_s_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDATA,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_data_V_U_ack_in,
        data_out => s_axis_video_TDATA_int,
        vld_out => s_axis_video_TVALID_int,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TKEEP,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_keep_V_U_ack_in,
        data_out => s_axis_video_TKEEP_int,
        vld_out => regslice_both_s_axis_video_V_keep_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TSTRB,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_strb_V_U_ack_in,
        data_out => s_axis_video_TSTRB_int,
        vld_out => regslice_both_s_axis_video_V_strb_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TUSER,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_user_V_U_ack_in,
        data_out => s_axis_video_TUSER_int,
        vld_out => regslice_both_s_axis_video_V_user_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TLAST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_last_V_U_ack_in,
        data_out => s_axis_video_TLAST_int,
        vld_out => regslice_both_s_axis_video_V_last_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TID,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_id_V_U_ack_in,
        data_out => s_axis_video_TID_int,
        vld_out => regslice_both_s_axis_video_V_id_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDEST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_dest_V_U_ack_in,
        data_out => s_axis_video_TDEST_int,
        vld_out => regslice_both_s_axis_video_V_dest_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_dest_V_U_apdone_blk);

    regslice_both_m_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_tmp_data_V_phi_fu_210_p8,
        vld_in => m_axis_video_TVALID_int,
        ack_in => m_axis_video_TREADY_int,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_515,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_520,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_525,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_530,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_535,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_540,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_tmp_data_V_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln18_reg_477 = ap_const_lv1_0) and (icmp_ln25_fu_325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln25_1_fu_337_p2 = ap_const_lv1_0) and (icmp_ln25_fu_325_p2 = ap_const_lv1_0)) or ((icmp_ln18_reg_477 = ap_const_lv1_0) and (icmp_ln25_2_fu_349_p2 = ap_const_lv1_1) and (icmp_ln25_1_fu_337_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln25_fu_325_p2 = ap_const_lv1_0)))) then 
                ap_phi_reg_pp0_iter1_tmp_data_V_reg_206 <= s_axis_video_TDATA_int;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_phi_reg_pp0_iter1_tmp_data_V_reg_206 <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_206;
            end if; 
        end if;
    end process;

    cgx_1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_477_pp0_iter1_reg = ap_const_lv1_0))) then 
                cgx_1_reg_170 <= cgx_2_fu_416_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cgx_1_reg_170 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cgy_1_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_477_pp0_iter1_reg = ap_const_lv1_0))) then 
                cgy_1_reg_182 <= cgy_2_fu_423_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cgy_1_reg_182 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_477_pp0_iter1_reg = ap_const_lv1_0))) then 
                i_0_reg_146 <= select_ln18_reg_491;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_146 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_135 <= add_ln18_reg_481;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_135 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_194 <= j_reg_557;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_194 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    nb_1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_477_pp0_iter1_reg = ap_const_lv1_0))) then 
                nb_1_reg_158 <= nb_2_fu_409_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nb_1_reg_158 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_data_V_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_255)) then
                if ((ap_const_boolean_1 = ap_condition_283)) then 
                    tmp_data_V_reg_206 <= select_ln25_fu_379_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    tmp_data_V_reg_206 <= ap_phi_reg_pp0_iter1_tmp_data_V_reg_206;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_reg_481 <= add_ln18_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_465 <= bound_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln39_reg_592 = ap_const_lv1_0))) then
                cgx_r <= grp_fu_436_p2;
                cgy_r <= grp_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cgx_reg_562 <= cgx_fu_387_p2;
                cgy_reg_567 <= cgy_fu_392_p2;
                nb_reg_572 <= nb_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_fu_253_p2 = ap_const_lv1_0))) then
                cgy_r_load_reg_486 <= cgy_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_477 <= icmp_ln18_fu_253_p2;
                icmp_ln18_reg_477_pp0_iter1_reg <= icmp_ln18_reg_477;
                icmp_ln20_reg_470 <= icmp_ln20_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln25_fu_325_p2 = ap_const_lv1_0))) then
                icmp_ln25_1_reg_549 <= icmp_ln25_1_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (icmp_ln25_1_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln25_fu_325_p2 = ap_const_lv1_0))) then
                icmp_ln25_2_reg_553 <= icmp_ln25_2_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln25_reg_545 <= icmp_ln25_fu_325_p2;
                tmp_data_V_1_reg_507 <= s_axis_video_TDATA_int;
                tmp_dest_V_reg_540 <= s_axis_video_TDEST_int;
                tmp_id_V_reg_535 <= s_axis_video_TID_int;
                tmp_keep_V_reg_515 <= s_axis_video_TKEEP_int;
                tmp_last_V_reg_530 <= s_axis_video_TLAST_int;
                tmp_strb_V_reg_520 <= s_axis_video_TSTRB_int;
                tmp_user_V_reg_525 <= s_axis_video_TUSER_int;
                    zext_ln18_1_reg_501(30 downto 0) <= zext_ln18_1_fu_288_p1(30 downto 0);
                    zext_ln18_reg_496(30 downto 0) <= zext_ln18_fu_277_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln39_reg_592 <= icmp_ln39_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                j_reg_557 <= j_fu_361_p3;
                select_ln18_reg_491 <= select_ln18_fu_270_p3;
            end if;
        end if;
    end process;
    zext_ln18_reg_496(31) <= '0';
    zext_ln18_1_reg_501(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln18_fu_253_p2, icmp_ln39_fu_430_p2, ap_CS_fsm_state6, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_CS_fsm_state41, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_253_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_253_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln39_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln18_1_fu_264_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_150_p4) + unsigned(ap_const_lv31_1));
    add_ln18_fu_258_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_139_p4) + unsigned(ap_const_lv64_1));
    add_ln20_fu_355_p2 <= std_logic_vector(unsigned(j_0_reg_194) + unsigned(ap_const_lv31_1));
    add_ln25_1_fu_331_p2 <= std_logic_vector(unsigned(cgy_r) + unsigned(ap_const_lv32_5));
    add_ln25_2_fu_343_p2 <= std_logic_vector(unsigned(cgx_r) + unsigned(ap_const_lv32_FFFFFFFB));
    add_ln25_3_fu_368_p2 <= std_logic_vector(unsigned(cgx_r) + unsigned(ap_const_lv32_5));
    add_ln25_fu_320_p2 <= std_logic_vector(unsigned(cgy_r_load_reg_486) + unsigned(ap_const_lv32_FFFFFFFB));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state41 <= ap_CS_fsm(38);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln18_reg_477, ap_enable_reg_pp0_iter1, ap_block_state5_io, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage1_11001 <= (((icmp_ln18_reg_477 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln18_reg_477, ap_enable_reg_pp0_iter1, ap_block_state5_io, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage1_subdone <= (((icmp_ln18_reg_477 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln18_reg_477, s_axis_video_TVALID_int)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln18_reg_477 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(icmp_ln18_reg_477, m_axis_video_TREADY_int)
    begin
                ap_block_state4_io <= ((icmp_ln18_reg_477 = ap_const_lv1_0) and (m_axis_video_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln18_reg_477_pp0_iter1_reg, m_axis_video_TREADY_int)
    begin
                ap_block_state5_io <= ((m_axis_video_TREADY_int = ap_const_logic_0) and (icmp_ln18_reg_477_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_255_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_255 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_283_assign_proc : process(icmp_ln18_reg_477, icmp_ln25_reg_545, icmp_ln25_1_reg_549, icmp_ln25_2_reg_553)
    begin
                ap_condition_283 <= ((icmp_ln18_reg_477 = ap_const_lv1_0) and (icmp_ln25_1_reg_549 = ap_const_lv1_1) and (icmp_ln25_2_reg_553 = ap_const_lv1_0) and (icmp_ln25_reg_545 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln18_fu_253_p2)
    begin
        if ((icmp_ln18_fu_253_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state41, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_150_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln18_reg_477_pp0_iter1_reg, i_0_reg_146, select_ln18_reg_491)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_477_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_150_p4 <= select_ln18_reg_491;
        else 
            ap_phi_mux_i_0_phi_fu_150_p4 <= i_0_reg_146;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_139_p4_assign_proc : process(icmp_ln18_reg_477, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, indvar_flatten_reg_135, add_ln18_reg_481)
    begin
        if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_139_p4 <= add_ln18_reg_481;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_139_p4 <= indvar_flatten_reg_135;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_198_p4_assign_proc : process(icmp_ln18_reg_477, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, j_0_reg_194, j_reg_557)
    begin
        if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_198_p4 <= j_reg_557;
        else 
            ap_phi_mux_j_0_phi_fu_198_p4 <= j_0_reg_194;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_phi_fu_210_p8_assign_proc : process(icmp_ln18_reg_477, icmp_ln25_reg_545, icmp_ln25_1_reg_549, icmp_ln25_2_reg_553, ap_phi_reg_pp0_iter1_tmp_data_V_reg_206, select_ln25_fu_379_p3)
    begin
        if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (icmp_ln25_1_reg_549 = ap_const_lv1_1) and (icmp_ln25_2_reg_553 = ap_const_lv1_0) and (icmp_ln25_reg_545 = ap_const_lv1_0))) then 
            ap_phi_mux_tmp_data_V_phi_fu_210_p8 <= select_ln25_fu_379_p3;
        else 
            ap_phi_mux_tmp_data_V_phi_fu_210_p8 <= ap_phi_reg_pp0_iter1_tmp_data_V_reg_206;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_data_V_reg_206 <= "XXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state41, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_238_p0 <= bound_fu_238_p00(32 - 1 downto 0);
    bound_fu_238_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hsize_in),64));
    bound_fu_238_p1 <= bound_fu_238_p10(32 - 1 downto 0);
    bound_fu_238_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vsize_in),64));
    bound_fu_238_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_238_p0) * unsigned(bound_fu_238_p1), 64));
    cgx_2_fu_416_p3 <= 
        cgx_reg_562 when (icmp_ln887_fu_403_p2(0) = '1') else 
        cgx_1_reg_170;
    cgx_fu_387_p2 <= std_logic_vector(unsigned(zext_ln18_1_reg_501) + unsigned(cgx_1_reg_170));
    cgy_2_fu_423_p3 <= 
        cgy_reg_567 when (icmp_ln887_fu_403_p2(0) = '1') else 
        cgy_1_reg_182;
    cgy_fu_392_p2 <= std_logic_vector(unsigned(cgy_1_reg_182) + unsigned(zext_ln18_reg_496));

    grp_fu_436_ap_start_assign_proc : process(icmp_ln39_fu_430_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln39_fu_430_p2 = ap_const_lv1_0))) then 
            grp_fu_436_ap_start <= ap_const_logic_1;
        else 
            grp_fu_436_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_436_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_436_ce <= ap_const_logic_0;
        else 
            grp_fu_436_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_442_ap_start_assign_proc : process(icmp_ln39_fu_430_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln39_fu_430_p2 = ap_const_lv1_0))) then 
            grp_fu_442_ap_start <= ap_const_logic_1;
        else 
            grp_fu_442_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_442_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_442_ce <= ap_const_logic_0;
        else 
            grp_fu_442_ce <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln18_fu_253_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_139_p4 = bound_reg_465) else "0";
    icmp_ln20_fu_248_p2 <= "1" when (signed(zext_ln20_fu_244_p1) < signed(hsize_in)) else "0";
    icmp_ln25_1_fu_337_p2 <= "1" when (signed(zext_ln18_fu_277_p1) < signed(add_ln25_1_fu_331_p2)) else "0";
    icmp_ln25_2_fu_349_p2 <= "1" when (signed(zext_ln18_1_fu_288_p1) < signed(add_ln25_2_fu_343_p2)) else "0";
    icmp_ln25_3_fu_374_p2 <= "1" when (signed(zext_ln18_1_reg_501) < signed(add_ln25_3_fu_368_p2)) else "0";
    icmp_ln25_fu_325_p2 <= "1" when (signed(zext_ln18_fu_277_p1) < signed(add_ln25_fu_320_p2)) else "0";
    icmp_ln39_fu_430_p2 <= "1" when (nb_1_reg_158 = ap_const_lv32_0) else "0";
    icmp_ln887_fu_403_p2 <= "1" when (unsigned(tmp_data_V_reg_206) < unsigned(ap_const_lv8_7D)) else "0";
    j_fu_361_p3 <= 
        add_ln20_fu_355_p2 when (icmp_ln20_reg_470(0) = '1') else 
        ap_const_lv31_1;

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, icmp_ln18_reg_477, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln18_reg_477_pp0_iter1_reg, m_axis_video_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_477_pp0_iter1_reg = ap_const_lv1_0)) or ((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY_int;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;

    m_axis_video_TVALID_int_assign_proc : process(icmp_ln18_reg_477, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axis_video_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_video_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    nb_2_fu_409_p3 <= 
        nb_reg_572 when (icmp_ln887_fu_403_p2(0) = '1') else 
        nb_1_reg_158;
    nb_fu_397_p2 <= std_logic_vector(unsigned(nb_1_reg_158) + unsigned(ap_const_lv32_1));

    s_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln18_reg_477, s_axis_video_TVALID_int)
    begin
        if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            s_axis_video_TDATA_blk_n <= s_axis_video_TVALID_int;
        else 
            s_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_axis_video_TREADY_assign_proc : process(s_axis_video_TVALID, regslice_both_s_axis_video_V_data_V_U_ack_in)
    begin
        if (((regslice_both_s_axis_video_V_data_V_U_ack_in = ap_const_logic_1) and (s_axis_video_TVALID = ap_const_logic_1))) then 
            s_axis_video_TREADY <= ap_const_logic_1;
        else 
            s_axis_video_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln18_reg_477, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln18_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            s_axis_video_TREADY_int <= ap_const_logic_1;
        else 
            s_axis_video_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln18_1_fu_281_p3 <= 
        j_0_reg_194 when (icmp_ln20_reg_470(0) = '1') else 
        ap_const_lv31_0;
    select_ln18_fu_270_p3 <= 
        ap_phi_mux_i_0_phi_fu_150_p4 when (icmp_ln20_reg_470(0) = '1') else 
        add_ln18_1_fu_264_p2;
    select_ln25_fu_379_p3 <= 
        ap_const_lv8_FF when (icmp_ln25_3_fu_374_p2(0) = '1') else 
        tmp_data_V_1_reg_507;
    zext_ln18_1_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_281_p3),32));
    zext_ln18_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_270_p3),32));
    zext_ln20_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_phi_fu_198_p4),32));
end behav;
