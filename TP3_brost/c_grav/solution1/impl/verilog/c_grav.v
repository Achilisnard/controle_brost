// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="c_grav,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1584,HLS_SYN_LUT=1685,HLS_VERSION=2019_2}" *)

module c_grav (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        hsize_in,
        vsize_in
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_pp0_stage0 = 39'd2;
parameter    ap_ST_fsm_pp0_stage1 = 39'd4;
parameter    ap_ST_fsm_state6 = 39'd8;
parameter    ap_ST_fsm_state7 = 39'd16;
parameter    ap_ST_fsm_state8 = 39'd32;
parameter    ap_ST_fsm_state9 = 39'd64;
parameter    ap_ST_fsm_state10 = 39'd128;
parameter    ap_ST_fsm_state11 = 39'd256;
parameter    ap_ST_fsm_state12 = 39'd512;
parameter    ap_ST_fsm_state13 = 39'd1024;
parameter    ap_ST_fsm_state14 = 39'd2048;
parameter    ap_ST_fsm_state15 = 39'd4096;
parameter    ap_ST_fsm_state16 = 39'd8192;
parameter    ap_ST_fsm_state17 = 39'd16384;
parameter    ap_ST_fsm_state18 = 39'd32768;
parameter    ap_ST_fsm_state19 = 39'd65536;
parameter    ap_ST_fsm_state20 = 39'd131072;
parameter    ap_ST_fsm_state21 = 39'd262144;
parameter    ap_ST_fsm_state22 = 39'd524288;
parameter    ap_ST_fsm_state23 = 39'd1048576;
parameter    ap_ST_fsm_state24 = 39'd2097152;
parameter    ap_ST_fsm_state25 = 39'd4194304;
parameter    ap_ST_fsm_state26 = 39'd8388608;
parameter    ap_ST_fsm_state27 = 39'd16777216;
parameter    ap_ST_fsm_state28 = 39'd33554432;
parameter    ap_ST_fsm_state29 = 39'd67108864;
parameter    ap_ST_fsm_state30 = 39'd134217728;
parameter    ap_ST_fsm_state31 = 39'd268435456;
parameter    ap_ST_fsm_state32 = 39'd536870912;
parameter    ap_ST_fsm_state33 = 39'd1073741824;
parameter    ap_ST_fsm_state34 = 39'd2147483648;
parameter    ap_ST_fsm_state35 = 39'd4294967296;
parameter    ap_ST_fsm_state36 = 39'd8589934592;
parameter    ap_ST_fsm_state37 = 39'd17179869184;
parameter    ap_ST_fsm_state38 = 39'd34359738368;
parameter    ap_ST_fsm_state39 = 39'd68719476736;
parameter    ap_ST_fsm_state40 = 39'd137438953472;
parameter    ap_ST_fsm_state41 = 39'd274877906944;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [31:0] hsize_in;
input  [31:0] vsize_in;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_axis_video_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] cgy_r;
reg   [31:0] cgx_r;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln24_reg_590;
reg    m_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln24_reg_590_pp0_iter1_reg;
reg   [63:0] indvar_flatten_reg_147;
reg   [30:0] i_0_reg_158;
reg   [31:0] nb_1_reg_170;
reg   [31:0] cgx_1_reg_182;
reg   [31:0] cgy_1_reg_194;
reg   [30:0] j_0_reg_206;
reg   [7:0] val_assign_reg_218;
reg   [7:0] val_assign_1_reg_232;
reg   [7:0] val_assign_2_reg_246;
wire   [63:0] bound_fu_276_p2;
reg   [63:0] bound_reg_578;
wire   [0:0] icmp_ln26_fu_286_p2;
reg   [0:0] icmp_ln26_reg_583;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln24_fu_291_p2;
wire   [63:0] add_ln24_fu_296_p2;
reg   [63:0] add_ln24_reg_594;
reg   [31:0] cgy_r_load_reg_599;
wire   [30:0] select_ln24_fu_308_p3;
reg   [30:0] select_ln24_reg_604;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] zext_ln24_fu_315_p1;
reg   [31:0] zext_ln24_reg_609;
wire   [31:0] zext_ln24_1_fu_326_p1;
reg   [31:0] zext_ln24_1_reg_614;
reg   [2:0] tmp_keep_V_reg_620;
reg   [2:0] tmp_strb_V_reg_625;
reg   [0:0] tmp_user_V_reg_630;
reg   [0:0] tmp_last_V_reg_635;
reg   [0:0] tmp_id_V_reg_640;
reg   [0:0] tmp_dest_V_reg_645;
wire   [7:0] pixel_red_fu_358_p1;
reg   [7:0] pixel_red_reg_650;
reg   [7:0] pixel_green_reg_658;
reg   [7:0] pixel_blue_reg_666;
wire   [0:0] icmp_ln34_fu_387_p2;
reg   [0:0] icmp_ln34_reg_674;
wire   [0:0] icmp_ln34_1_fu_399_p2;
reg   [0:0] icmp_ln34_1_reg_678;
wire   [0:0] icmp_ln34_2_fu_411_p2;
reg   [0:0] icmp_ln34_2_reg_682;
wire   [30:0] j_fu_423_p3;
reg   [30:0] j_reg_686;
wire   [31:0] cgx_fu_465_p2;
reg   [31:0] cgx_reg_691;
wire   [31:0] cgy_fu_470_p2;
reg   [31:0] cgy_reg_696;
wire   [31:0] nb_fu_475_p2;
reg   [31:0] nb_reg_701;
wire   [31:0] nb_2_fu_522_p3;
wire   [31:0] cgx_2_fu_529_p3;
wire   [31:0] cgy_2_fu_536_p3;
wire   [0:0] icmp_ln53_fu_543_p2;
reg   [0:0] icmp_ln53_reg_726;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_151_p4;
reg   [30:0] ap_phi_mux_i_0_phi_fu_162_p4;
reg   [30:0] ap_phi_mux_j_0_phi_fu_210_p4;
reg   [7:0] ap_phi_mux_val_assign_phi_fu_221_p8;
wire   [7:0] select_ln34_fu_441_p3;
reg   [7:0] ap_phi_reg_pp0_iter1_val_assign_reg_218;
wire   [7:0] ap_phi_reg_pp0_iter0_val_assign_reg_218;
reg   [7:0] ap_phi_mux_val_assign_1_phi_fu_235_p8;
wire   [7:0] select_ln34_1_fu_449_p3;
reg   [7:0] ap_phi_reg_pp0_iter1_val_assign_1_reg_232;
wire   [7:0] ap_phi_reg_pp0_iter0_val_assign_1_reg_232;
reg   [7:0] ap_phi_mux_val_assign_2_phi_fu_249_p8;
wire   [7:0] select_ln34_2_fu_457_p3;
reg   [7:0] ap_phi_reg_pp0_iter1_val_assign_2_reg_246;
wire   [7:0] ap_phi_reg_pp0_iter0_val_assign_2_reg_246;
wire   [31:0] grp_fu_555_p2;
wire    ap_CS_fsm_state41;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
wire   [31:0] grp_fu_549_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_276_p0;
wire   [31:0] bound_fu_276_p1;
wire   [31:0] zext_ln26_fu_282_p1;
wire   [30:0] add_ln24_1_fu_302_p2;
wire   [30:0] select_ln24_1_fu_319_p3;
wire   [31:0] add_ln34_fu_382_p2;
wire   [31:0] add_ln34_1_fu_393_p2;
wire   [31:0] add_ln34_2_fu_405_p2;
wire   [30:0] add_ln26_fu_417_p2;
wire   [31:0] add_ln34_3_fu_430_p2;
wire   [0:0] icmp_ln34_3_fu_436_p2;
wire   [0:0] icmp_ln40_1_fu_498_p2;
wire   [0:0] icmp_ln40_2_fu_504_p2;
wire   [0:0] and_ln40_fu_510_p2;
wire   [0:0] icmp_ln40_fu_492_p2;
wire   [0:0] and_ln40_1_fu_516_p2;
reg    grp_fu_549_ap_start;
wire    grp_fu_549_ap_done;
reg    grp_fu_549_ce;
reg    grp_fu_555_ap_start;
wire    grp_fu_555_ap_done;
reg    grp_fu_555_ce;
reg   [38:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [23:0] s_axis_video_TDATA_int;
wire    s_axis_video_TVALID_int;
reg    s_axis_video_TREADY_int;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [2:0] s_axis_video_TKEEP_int;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [2:0] s_axis_video_TSTRB_int;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
wire   [23:0] m_axis_video_TDATA_int;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire   [63:0] bound_fu_276_p00;
wire   [63:0] bound_fu_276_p10;
reg    ap_condition_280;
reg    ap_condition_264;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
#0 cgy_r = 32'd95;
#0 cgx_r = 32'd95;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

c_grav_udiv_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
c_grav_udiv_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_549_ap_start),
    .done(grp_fu_549_ap_done),
    .din0(cgx_1_reg_182),
    .din1(nb_1_reg_170),
    .ce(grp_fu_549_ce),
    .dout(grp_fu_549_p2)
);

c_grav_udiv_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
c_grav_udiv_32ns_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_555_ap_start),
    .done(grp_fu_555_ap_done),
    .din0(cgy_1_reg_194),
    .din1(nb_1_reg_170),
    .ce(grp_fu_555_ce),
    .dout(grp_fu_555_p2)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int),
    .vld_out(s_axis_video_TVALID_int),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_video_TDATA_int),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_620),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_625),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_630),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_635),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_640),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_645),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_fu_387_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln34_1_fu_399_p2 == 1'd0) & (icmp_ln34_fu_387_p2 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln34_fu_387_p2 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_2_fu_411_p2 == 1'd1) & (icmp_ln34_1_fu_399_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        ap_phi_reg_pp0_iter1_val_assign_1_reg_232 <= {{s_axis_video_TDATA_int[15:8]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_val_assign_1_reg_232 <= ap_phi_reg_pp0_iter0_val_assign_1_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_fu_387_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln34_1_fu_399_p2 == 1'd0) & (icmp_ln34_fu_387_p2 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln34_fu_387_p2 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_2_fu_411_p2 == 1'd1) & (icmp_ln34_1_fu_399_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        ap_phi_reg_pp0_iter1_val_assign_2_reg_246 <= {{s_axis_video_TDATA_int[23:16]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_val_assign_2_reg_246 <= ap_phi_reg_pp0_iter0_val_assign_2_reg_246;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_fu_387_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln34_1_fu_399_p2 == 1'd0) & (icmp_ln34_fu_387_p2 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln34_fu_387_p2 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_2_fu_411_p2 == 1'd1) & (icmp_ln34_1_fu_399_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        ap_phi_reg_pp0_iter1_val_assign_reg_218 <= pixel_red_fu_358_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_val_assign_reg_218 <= ap_phi_reg_pp0_iter0_val_assign_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        cgx_1_reg_182 <= cgx_2_fu_529_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cgx_1_reg_182 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        cgy_1_reg_194 <= cgy_2_fu_536_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cgy_1_reg_194 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        i_0_reg_158 <= select_ln24_reg_604;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_158 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_147 <= add_ln24_reg_594;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_147 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_206 <= j_reg_686;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_206 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        nb_1_reg_170 <= nb_2_fu_522_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        nb_1_reg_170 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_264)) begin
        if ((1'b1 == ap_condition_280)) begin
            val_assign_1_reg_232 <= select_ln34_1_fu_449_p3;
        end else if ((1'b1 == 1'b1)) begin
            val_assign_1_reg_232 <= ap_phi_reg_pp0_iter1_val_assign_1_reg_232;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_264)) begin
        if ((1'b1 == ap_condition_280)) begin
            val_assign_2_reg_246 <= select_ln34_2_fu_457_p3;
        end else if ((1'b1 == 1'b1)) begin
            val_assign_2_reg_246 <= ap_phi_reg_pp0_iter1_val_assign_2_reg_246;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_264)) begin
        if ((1'b1 == ap_condition_280)) begin
            val_assign_reg_218 <= select_ln34_fu_441_p3;
        end else if ((1'b1 == 1'b1)) begin
            val_assign_reg_218 <= ap_phi_reg_pp0_iter1_val_assign_reg_218;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln24_reg_594 <= add_ln24_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_578 <= bound_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_reg_726 == 1'd0) & (regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        cgx_r <= grp_fu_549_p2;
        cgy_r <= grp_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cgx_reg_691 <= cgx_fu_465_p2;
        cgy_reg_696 <= cgy_fu_470_p2;
        nb_reg_701 <= nb_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_291_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cgy_r_load_reg_599 <= cgy_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln24_reg_590 <= icmp_ln24_fu_291_p2;
        icmp_ln24_reg_590_pp0_iter1_reg <= icmp_ln24_reg_590;
        icmp_ln26_reg_583 <= icmp_ln26_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_387_p2 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln34_1_reg_678 <= icmp_ln34_1_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_387_p2 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_1_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln34_2_reg_682 <= icmp_ln34_2_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln34_reg_674 <= icmp_ln34_fu_387_p2;
        pixel_blue_reg_666 <= {{s_axis_video_TDATA_int[23:16]}};
        pixel_green_reg_658 <= {{s_axis_video_TDATA_int[15:8]}};
        pixel_red_reg_650 <= pixel_red_fu_358_p1;
        tmp_dest_V_reg_645 <= s_axis_video_TDEST_int;
        tmp_id_V_reg_640 <= s_axis_video_TID_int;
        tmp_keep_V_reg_620 <= s_axis_video_TKEEP_int;
        tmp_last_V_reg_635 <= s_axis_video_TLAST_int;
        tmp_strb_V_reg_625 <= s_axis_video_TSTRB_int;
        tmp_user_V_reg_630 <= s_axis_video_TUSER_int;
        zext_ln24_1_reg_614[30 : 0] <= zext_ln24_1_fu_326_p1[30 : 0];
        zext_ln24_reg_609[30 : 0] <= zext_ln24_fu_315_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln53_reg_726 <= icmp_ln53_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_reg_686 <= j_fu_423_p3;
        select_ln24_reg_604 <= select_ln24_fu_308_p3;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_291_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_590_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_162_p4 = select_ln24_reg_604;
    end else begin
        ap_phi_mux_i_0_phi_fu_162_p4 = i_0_reg_158;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_151_p4 = add_ln24_reg_594;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_151_p4 = indvar_flatten_reg_147;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_210_p4 = j_reg_686;
    end else begin
        ap_phi_mux_j_0_phi_fu_210_p4 = j_0_reg_206;
    end
end

always @ (*) begin
    if (((icmp_ln34_2_reg_682 == 1'd0) & (icmp_ln34_reg_674 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_1_reg_678 == 1'd1))) begin
        ap_phi_mux_val_assign_1_phi_fu_235_p8 = select_ln34_1_fu_449_p3;
    end else begin
        ap_phi_mux_val_assign_1_phi_fu_235_p8 = ap_phi_reg_pp0_iter1_val_assign_1_reg_232;
    end
end

always @ (*) begin
    if (((icmp_ln34_2_reg_682 == 1'd0) & (icmp_ln34_reg_674 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_1_reg_678 == 1'd1))) begin
        ap_phi_mux_val_assign_2_phi_fu_249_p8 = select_ln34_2_fu_457_p3;
    end else begin
        ap_phi_mux_val_assign_2_phi_fu_249_p8 = ap_phi_reg_pp0_iter1_val_assign_2_reg_246;
    end
end

always @ (*) begin
    if (((icmp_ln34_2_reg_682 == 1'd0) & (icmp_ln34_reg_674 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_1_reg_678 == 1'd1))) begin
        ap_phi_mux_val_assign_phi_fu_221_p8 = select_ln34_fu_441_p3;
    end else begin
        ap_phi_mux_val_assign_phi_fu_221_p8 = ap_phi_reg_pp0_iter1_val_assign_reg_218;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_549_ap_start = 1'b1;
    end else begin
        grp_fu_549_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_549_ce = 1'b0;
    end else begin
        grp_fu_549_ce = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln53_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_555_ap_start = 1'b1;
    end else begin
        grp_fu_555_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_555_ce = 1'b0;
    end else begin
        grp_fu_555_ce = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln24_reg_590_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_s_axis_video_V_data_V_U_ack_in == 1'b1) & (s_axis_video_TVALID == 1'b1))) begin
        s_axis_video_TREADY = 1'b1;
    end else begin
        s_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        s_axis_video_TREADY_int = 1'b1;
    end else begin
        s_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_291_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_291_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln53_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_1_fu_302_p2 = (31'd1 + ap_phi_mux_i_0_phi_fu_162_p4);

assign add_ln24_fu_296_p2 = (ap_phi_mux_indvar_flatten_phi_fu_151_p4 + 64'd1);

assign add_ln26_fu_417_p2 = (j_0_reg_206 + 31'd1);

assign add_ln34_1_fu_393_p2 = (cgy_r + 32'd5);

assign add_ln34_2_fu_405_p2 = ($signed(cgx_r) + $signed(32'd4294967291));

assign add_ln34_3_fu_430_p2 = (cgx_r + 32'd5);

assign add_ln34_fu_382_p2 = ($signed(32'd4294967291) + $signed(cgy_r_load_reg_599));

assign and_ln40_1_fu_516_p2 = (icmp_ln40_fu_492_p2 & and_ln40_fu_510_p2);

assign and_ln40_fu_510_p2 = (icmp_ln40_2_fu_504_p2 & icmp_ln40_1_fu_498_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((icmp_ln24_reg_590 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((icmp_ln24_reg_590 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln24_reg_590 == 1'd0) & (s_axis_video_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln24_reg_590 == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln24_reg_590_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_264 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_280 = ((icmp_ln34_2_reg_682 == 1'd0) & (icmp_ln34_reg_674 == 1'd0) & (icmp_ln24_reg_590 == 1'd0) & (icmp_ln34_1_reg_678 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_val_assign_1_reg_232 = 'bx;

assign ap_phi_reg_pp0_iter0_val_assign_2_reg_246 = 'bx;

assign ap_phi_reg_pp0_iter0_val_assign_reg_218 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_276_p0 = bound_fu_276_p00;

assign bound_fu_276_p00 = hsize_in;

assign bound_fu_276_p1 = bound_fu_276_p10;

assign bound_fu_276_p10 = vsize_in;

assign bound_fu_276_p2 = (bound_fu_276_p0 * bound_fu_276_p1);

assign cgx_2_fu_529_p3 = ((and_ln40_1_fu_516_p2[0:0] === 1'b1) ? cgx_reg_691 : cgx_1_reg_182);

assign cgx_fu_465_p2 = (zext_ln24_1_reg_614 + cgx_1_reg_182);

assign cgy_2_fu_536_p3 = ((and_ln40_1_fu_516_p2[0:0] === 1'b1) ? cgy_reg_696 : cgy_1_reg_194);

assign cgy_fu_470_p2 = (cgy_1_reg_194 + zext_ln24_reg_609);

assign icmp_ln24_fu_291_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_151_p4 == bound_reg_578) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_286_p2 = (($signed(zext_ln26_fu_282_p1) < $signed(hsize_in)) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_399_p2 = (($signed(zext_ln24_fu_315_p1) < $signed(add_ln34_1_fu_393_p2)) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_411_p2 = (($signed(zext_ln24_1_fu_326_p1) < $signed(add_ln34_2_fu_405_p2)) ? 1'b1 : 1'b0);

assign icmp_ln34_3_fu_436_p2 = (($signed(zext_ln24_1_reg_614) < $signed(add_ln34_3_fu_430_p2)) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_387_p2 = (($signed(zext_ln24_fu_315_p1) < $signed(add_ln34_fu_382_p2)) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_498_p2 = ((val_assign_1_reg_232 < 8'd100) ? 1'b1 : 1'b0);

assign icmp_ln40_2_fu_504_p2 = ((val_assign_2_reg_246 < 8'd100) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_492_p2 = ((val_assign_reg_218 < 8'd100) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_543_p2 = ((nb_1_reg_170 == 32'd0) ? 1'b1 : 1'b0);

assign j_fu_423_p3 = ((icmp_ln26_reg_583[0:0] === 1'b1) ? add_ln26_fu_417_p2 : 31'd1);

assign m_axis_video_TDATA_int = {{{ap_phi_mux_val_assign_2_phi_fu_249_p8}, {ap_phi_mux_val_assign_1_phi_fu_235_p8}}, {ap_phi_mux_val_assign_phi_fu_221_p8}};

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign nb_2_fu_522_p3 = ((and_ln40_1_fu_516_p2[0:0] === 1'b1) ? nb_reg_701 : nb_1_reg_170);

assign nb_fu_475_p2 = (nb_1_reg_170 + 32'd1);

assign pixel_red_fu_358_p1 = s_axis_video_TDATA_int[7:0];

assign select_ln24_1_fu_319_p3 = ((icmp_ln26_reg_583[0:0] === 1'b1) ? j_0_reg_206 : 31'd0);

assign select_ln24_fu_308_p3 = ((icmp_ln26_reg_583[0:0] === 1'b1) ? ap_phi_mux_i_0_phi_fu_162_p4 : add_ln24_1_fu_302_p2);

assign select_ln34_1_fu_449_p3 = ((icmp_ln34_3_fu_436_p2[0:0] === 1'b1) ? 8'd255 : pixel_green_reg_658);

assign select_ln34_2_fu_457_p3 = ((icmp_ln34_3_fu_436_p2[0:0] === 1'b1) ? 8'd255 : pixel_blue_reg_666);

assign select_ln34_fu_441_p3 = ((icmp_ln34_3_fu_436_p2[0:0] === 1'b1) ? 8'd255 : pixel_red_reg_650);

assign zext_ln24_1_fu_326_p1 = select_ln24_1_fu_319_p3;

assign zext_ln24_fu_315_p1 = select_ln24_fu_308_p3;

assign zext_ln26_fu_282_p1 = ap_phi_mux_j_0_phi_fu_210_p4;

always @ (posedge ap_clk) begin
    zext_ln24_reg_609[31] <= 1'b0;
    zext_ln24_1_reg_614[31] <= 1'b0;
end

endmodule //c_grav
