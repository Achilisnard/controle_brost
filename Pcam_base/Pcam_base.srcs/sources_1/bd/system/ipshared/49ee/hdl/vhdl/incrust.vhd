-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity incrust is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    hsize_in : IN STD_LOGIC_VECTOR (31 downto 0);
    vsize_in : IN STD_LOGIC_VECTOR (31 downto 0);
    start_x : IN STD_LOGIC_VECTOR (31 downto 0);
    start_y : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of incrust is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "incrust,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=4,HLS_SYN_FF=329,HLS_SYN_LUT=722,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal im_incrust_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal im_incrust_V_ce0 : STD_LOGIC;
    signal im_incrust_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln16_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln16_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln16_reg_482_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_179 : STD_LOGIC_VECTOR (30 downto 0);
    signal pixel_1_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_201 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln22_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_1_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_1_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_477 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln16_fu_266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln16_3_fu_320_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_496_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_keep_V_reg_501 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_strb_V_reg_506 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_user_V_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_2_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_417_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal sext_ln23_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_232_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_1_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_1_fu_272_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln16_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln19_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_3_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_4_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_2_fu_308_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln16_2_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_5_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_2_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln22_1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_1_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_1_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln22_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_fu_411_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln879_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal video_data_V_1_fu_434_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal s_axis_video_TVALID_int : STD_LOGIC;
    signal s_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TKEEP_int : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_s_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TSTRB_int : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_s_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal m_axis_video_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal m_axis_video_TVALID_int : STD_LOGIC;
    signal m_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal bound_fu_232_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_232_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component incrust_im_incrusbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    im_incrust_V_U : component incrust_im_incrusbkb
    generic map (
        DataWidth => 8,
        AddressRange => 10064,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => im_incrust_V_address0,
        ce0 => im_incrust_V_ce0,
        q0 => im_incrust_V_q0);

    regslice_both_s_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDATA,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_data_V_U_ack_in,
        data_out => s_axis_video_TDATA_int,
        vld_out => s_axis_video_TVALID_int,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TKEEP,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_keep_V_U_ack_in,
        data_out => s_axis_video_TKEEP_int,
        vld_out => regslice_both_s_axis_video_V_keep_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TSTRB,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_strb_V_U_ack_in,
        data_out => s_axis_video_TSTRB_int,
        vld_out => regslice_both_s_axis_video_V_strb_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TUSER,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_user_V_U_ack_in,
        data_out => s_axis_video_TUSER_int,
        vld_out => regslice_both_s_axis_video_V_user_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TLAST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_last_V_U_ack_in,
        data_out => s_axis_video_TLAST_int,
        vld_out => regslice_both_s_axis_video_V_last_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TID,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_id_V_U_ack_in,
        data_out => s_axis_video_TID_int,
        vld_out => regslice_both_s_axis_video_V_id_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDEST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_dest_V_U_ack_in,
        data_out => s_axis_video_TDEST_int,
        vld_out => regslice_both_s_axis_video_V_dest_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_dest_V_U_apdone_blk);

    regslice_both_m_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_video_TDATA_int,
        vld_in => m_axis_video_TVALID_int,
        ack_in => m_axis_video_TREADY_int,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_501,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_506,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_511,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_516,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_521,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_526,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_179 <= select_ln16_3_fu_320_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_179 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_168 <= add_ln16_fu_266_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                indvar_flatten_reg_168 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_201 <= j_fu_417_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                j_0_reg_201 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    pixel_1_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                pixel_1_reg_190 <= pixel_2_fu_403_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                pixel_1_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln22_1_reg_471 <= add_ln22_1_fu_218_p2;
                add_ln22_reg_466 <= add_ln22_fu_212_p2;
                bound_reg_477 <= bound_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln22_reg_531 <= and_ln22_fu_386_p2;
                empty_reg_496_0 <= s_axis_video_TDATA_int;
                tmp_dest_V_reg_526 <= s_axis_video_TDEST_int;
                tmp_id_V_reg_521 <= s_axis_video_TID_int;
                tmp_keep_V_reg_501 <= s_axis_video_TKEEP_int;
                tmp_last_V_reg_516 <= s_axis_video_TLAST_int;
                tmp_strb_V_reg_506 <= s_axis_video_TSTRB_int;
                tmp_user_V_reg_511 <= s_axis_video_TUSER_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln16_reg_482 <= icmp_ln16_fu_261_p2;
                icmp_ln16_reg_482_pp0_iter1_reg <= icmp_ln16_reg_482;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter0, icmp_ln16_fu_261_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln16_fu_261_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln16_fu_261_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln16_1_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i_0_reg_179));
    add_ln16_fu_266_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_168) + unsigned(ap_const_lv64_1));
    add_ln19_fu_411_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j_0_reg_201));
    add_ln22_1_fu_218_p2 <= std_logic_vector(unsigned(start_y) + unsigned(ap_const_lv32_45));
    add_ln22_fu_212_p2 <= std_logic_vector(unsigned(start_x) + unsigned(ap_const_lv32_94));
    and_ln22_fu_386_p2 <= (xor_ln22_fu_380_p2 and select_ln16_1_fu_300_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln16_fu_261_p2, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln16_fu_261_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln16_fu_261_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln16_fu_261_p2, s_axis_video_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln16_reg_482, m_axis_video_TREADY_int)
    begin
                ap_block_state3_io <= ((icmp_ln16_reg_482 = ap_const_lv1_0) and (m_axis_video_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(icmp_ln16_reg_482_pp0_iter1_reg, m_axis_video_TREADY_int)
    begin
                ap_block_state4_io <= ((icmp_ln16_reg_482_pp0_iter1_reg = ap_const_lv1_0) and (m_axis_video_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln16_fu_261_p2)
    begin
        if ((icmp_ln16_fu_261_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_232_p0 <= bound_fu_232_p00(32 - 1 downto 0);
    bound_fu_232_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hsize_in),64));
    bound_fu_232_p1 <= bound_fu_232_p10(32 - 1 downto 0);
    bound_fu_232_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vsize_in),64));
    bound_fu_232_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_232_p0) * unsigned(bound_fu_232_p1), 64));
    icmp_ln16_fu_261_p2 <= "1" when (indvar_flatten_reg_168 = bound_reg_477) else "0";
    icmp_ln19_fu_256_p2 <= "1" when (signed(zext_ln19_fu_252_p1) < signed(hsize_in)) else "0";
    icmp_ln22_1_fu_247_p2 <= "1" when (signed(zext_ln16_1_fu_238_p1) < signed(add_ln22_1_reg_471)) else "0";
    icmp_ln22_2_fu_352_p2 <= "1" when (signed(zext_ln16_2_fu_316_p1) < signed(start_x)) else "0";
    icmp_ln22_3_fu_282_p2 <= "1" when (signed(zext_ln16_fu_278_p1) < signed(start_y)) else "0";
    icmp_ln22_4_fu_295_p2 <= "1" when (signed(zext_ln16_fu_278_p1) < signed(add_ln22_1_reg_471)) else "0";
    icmp_ln22_5_fu_357_p2 <= "1" when (signed(zext_ln16_2_fu_316_p1) < signed(add_ln22_reg_466)) else "0";
    icmp_ln22_fu_242_p2 <= "1" when (signed(zext_ln16_1_fu_238_p1) < signed(start_y)) else "0";
    icmp_ln879_fu_428_p2 <= "1" when (im_incrust_V_q0 = ap_const_lv8_FF) else "0";
    im_incrust_V_address0 <= sext_ln23_fu_392_p1(14 - 1 downto 0);

    im_incrust_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            im_incrust_V_ce0 <= ap_const_logic_1;
        else 
            im_incrust_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_417_p3 <= 
        add_ln19_fu_411_p2 when (icmp_ln19_fu_256_p2(0) = '1') else 
        ap_const_lv31_1;

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln16_reg_482, ap_enable_reg_pp0_iter2, icmp_ln16_reg_482_pp0_iter1_reg, m_axis_video_TREADY_int)
    begin
        if ((((icmp_ln16_reg_482_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln16_reg_482 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY_int;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDATA_int <= 
        video_data_V_1_fu_434_p3 when (and_ln22_reg_531(0) = '1') else 
        empty_reg_496_0;
    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;

    m_axis_video_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln16_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln16_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axis_video_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_video_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    or_ln22_1_fu_374_p2 <= (xor_ln22_1_fu_362_p2 or or_ln22_fu_368_p2);
    or_ln22_fu_368_p2 <= (select_ln16_fu_287_p3 or icmp_ln22_2_fu_352_p2);
    pixel_2_fu_403_p3 <= 
        pixel_fu_397_p2 when (and_ln22_fu_386_p2(0) = '1') else 
        pixel_1_reg_190;
    pixel_fu_397_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(pixel_1_reg_190));

    s_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln16_fu_261_p2, s_axis_video_TVALID_int)
    begin
        if (((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_video_TDATA_blk_n <= s_axis_video_TVALID_int;
        else 
            s_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_axis_video_TREADY_assign_proc : process(s_axis_video_TVALID, regslice_both_s_axis_video_V_data_V_U_ack_in)
    begin
        if (((regslice_both_s_axis_video_V_data_V_U_ack_in = ap_const_logic_1) and (s_axis_video_TVALID = ap_const_logic_1))) then 
            s_axis_video_TREADY <= ap_const_logic_1;
        else 
            s_axis_video_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln16_fu_261_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln16_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_axis_video_TREADY_int <= ap_const_logic_1;
        else 
            s_axis_video_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln16_1_fu_300_p3 <= 
        icmp_ln22_1_fu_247_p2 when (icmp_ln19_fu_256_p2(0) = '1') else 
        icmp_ln22_4_fu_295_p2;
    select_ln16_2_fu_308_p3 <= 
        j_0_reg_201 when (icmp_ln19_fu_256_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln16_3_fu_320_p3 <= 
        i_0_reg_179 when (icmp_ln19_fu_256_p2(0) = '1') else 
        add_ln16_1_fu_272_p2;
    select_ln16_fu_287_p3 <= 
        icmp_ln22_fu_242_p2 when (icmp_ln19_fu_256_p2(0) = '1') else 
        icmp_ln22_3_fu_282_p2;
        sext_ln23_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pixel_1_reg_190),64));

    video_data_V_1_fu_434_p3 <= 
        ap_const_lv24_FFFFFF when (icmp_ln879_fu_428_p2(0) = '1') else 
        ap_const_lv24_0;
    xor_ln22_1_fu_362_p2 <= (icmp_ln22_5_fu_357_p2 xor ap_const_lv1_1);
    xor_ln22_fu_380_p2 <= (or_ln22_1_fu_374_p2 xor ap_const_lv1_1);
    zext_ln16_1_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_179),32));
    zext_ln16_2_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_2_fu_308_p3),32));
    zext_ln16_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_fu_272_p2),32));
    zext_ln19_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_201),32));
end behav;
